/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ui_library;

import controllers.NguoiDungController;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.NguoiDungModel;

/**
 *
 * @author admin
 */
public final class QLNguoiDung extends javax.swing.JDialog {

    /**
     * Creates new form QLNguoiDung
     */
    // Khai báo tableModel
    private final DefaultTableModel tableModel;
    private final NguoiDungController dsuser;
    
    public QLNguoiDung(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        // can giua cho form
        this.setLocationRelativeTo(null);
        setupUI();
        // Cấu hình bảng và controller
        tableModel = (DefaultTableModel) tblNguoidung.getModel();
        dsuser = new NguoiDungController();
        // Khởi tạo các components trên JFrame
        String[] colsName = {"Mã", " Họ Tên", "Tài khoản", "Mật khẩu", "Số điện thoại", "Quyền hạn"};
        // đặt tiêu đề cột cho tableModel
        tableModel.setColumnIdentifiers(colsName);
        // Kết nối JTable với tableModel
        tblNguoidung.setModel(tableModel);
        // Gọi hàm showDataOnTable() để hiển thị dữ liệu lên bảng
        ShowData();
        
        
        
        lblWhoten.setVisible(false);
        lblWtk.setVisible(false);
        lblWmk.setVisible(false);
        lblWmk2.setVisible(false);
        lblWtkExist.setVisible(false);
        lblWsdt.setVisible(false);
        lblWsdt1.setVisible(false);
        
         // Cài đặt biểu tượng show/hide mật khẩu
        lblShowMK.setVisible(true); // Hiển thị biểu tượng mở mắt ban đầu
        lblHideMK.setVisible(false); // Ẩn biểu tượng đóng mắt ban đầu
        
        lblShowMK1.setVisible(true); // Hiển thị biểu tượng mở mắt ban đầu
        lblHideMK1.setVisible(false); // Ẩn biểu tượng đóng mắt ban đầu
    }

    private void setupUI(){
        //set UI
        tblNguoidung.getTableHeader().setBackground(new java.awt.Color(200,247,197));
        tblNguoidung.getTableHeader().setForeground(new java.awt.Color(4,147,114));
        tblNguoidung.getTableHeader().setFont(new java.awt.Font("Roboto", 1, 16));
        tblNguoidung.getTableHeader().setOpaque(false);
        
        
    }
    
    public void ShowData() throws SQLException{ 
        List<NguoiDungModel> lst = dsuser.getdsNguoidung();
        // Duyệt qua ArrayList data
        Object[] rows = new Object[6];
        for(int i =0; i< lst.size() ; i++){
            rows[0] = lst.get(i).getManguoidung();
            rows[1] = lst.get(i).getHoten();
            rows[2] = lst.get(i).getTaikhoan();
            rows[3] = lst.get(i).getMatkhau();
            rows[4] = lst.get(i).getSodienthoai();
            rows[5] = lst.get(i).getLoaiuser();
            // Đưa dòng dữ liệu vào tableModel
            tableModel.addRow(rows);
        }     
    }
    
    //Ham xoa du lieu trong tableModel 
    public void ClearData() throws SQLException{ 
        int rowCount = tableModel.getRowCount(); // Lấy số lượng dòng hiện tại
        for (int i = rowCount - 1; i >= 0; i--) {
            tableModel.removeRow(i); // Xóa từng dòng
        }
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Theloaisach = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguoidung = new javax.swing.JTable();
        lblMasach = new javax.swing.JLabel();
        lblTensach = new javax.swing.JLabel();
        lblTacgia = new javax.swing.JLabel();
        lblTheloai = new javax.swing.JLabel();
        lblSoluong = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtHoten = new javax.swing.JTextField();
        txtTentaikhoan = new javax.swing.JTextField();
        btnHuy = new javax.swing.JButton();
        lblTieudeTL = new javax.swing.JLabel();
        btnSua = new javax.swing.JButton();
        txtMatkhau = new javax.swing.JPasswordField();
        txtMkxacthuc = new javax.swing.JPasswordField();
        ChkSetAdmin = new javax.swing.JCheckBox();
        lblWmk = new javax.swing.JLabel();
        lblWmk2 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        btnHienThi = new javax.swing.JButton();
        lblHideMK = new javax.swing.JLabel();
        lblShowMK = new javax.swing.JLabel();
        lblShowMK1 = new javax.swing.JLabel();
        lblHideMK1 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        lblWtk = new javax.swing.JLabel();
        lblWhoten = new javax.swing.JLabel();
        lblWtkExist = new javax.swing.JLabel();
        txtSdt = new javax.swing.JTextField();
        lblSdt = new javax.swing.JLabel();
        lblWsdt = new javax.swing.JLabel();
        lblWsdt1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_Theloaisach.setBackground(new java.awt.Color(167, 230, 255));
        jPanel_Theloaisach.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 3, 3, 3, new java.awt.Color(5, 12, 156)));
        jPanel_Theloaisach.setForeground(new java.awt.Color(5, 12, 156));
        jPanel_Theloaisach.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblNguoidung.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tblNguoidung.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Họ tên", "Tên tài khoản", "Mật khẩu", "Số điện thoại", "Quyền hạn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblNguoidung.setRowHeight(25);
        tblNguoidung.setSelectionBackground(new java.awt.Color(30, 130, 76));
        tblNguoidung.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tblNguoidung.setShowGrid(true);
        tblNguoidung.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoidungMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNguoidung);

        jPanel_Theloaisach.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 520, 470));

        lblMasach.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblMasach.setForeground(new java.awt.Color(5, 12, 156));
        lblMasach.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMasach.setText("Tìm kiếm:");
        lblMasach.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(5, 12, 156)));
        jPanel_Theloaisach.add(lblMasach, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 80, 100, 32));

        lblTensach.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblTensach.setForeground(new java.awt.Color(5, 12, 156));
        lblTensach.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTensach.setText("Họ tên:");
        jPanel_Theloaisach.add(lblTensach, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 135, 32));

        lblTacgia.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblTacgia.setForeground(new java.awt.Color(5, 12, 156));
        lblTacgia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTacgia.setText("Tên tài khoản:");
        jPanel_Theloaisach.add(lblTacgia, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 135, 32));

        lblTheloai.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblTheloai.setForeground(new java.awt.Color(5, 12, 156));
        lblTheloai.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTheloai.setText("Mật khẩu:");
        jPanel_Theloaisach.add(lblTheloai, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 135, 32));

        lblSoluong.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblSoluong.setForeground(new java.awt.Color(5, 12, 156));
        lblSoluong.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSoluong.setText("Xác thực lại:");
        jPanel_Theloaisach.add(lblSoluong, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, 135, 32));

        txtID.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtID.setEnabled(false);
        jPanel_Theloaisach.add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 32, 32));

        txtHoten.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtHoten.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel_Theloaisach.add(txtHoten, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 200, 32));

        txtTentaikhoan.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtTentaikhoan.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel_Theloaisach.add(txtTentaikhoan, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 200, 32));

        btnHuy.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        btnHuy.setForeground(new java.awt.Color(5, 12, 156));
        btnHuy.setText("Hủy bỏ");
        btnHuy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(btnHuy, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 550, 150, 35));

        lblTieudeTL.setBackground(new java.awt.Color(5, 12, 156));
        lblTieudeTL.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTieudeTL.setForeground(new java.awt.Color(255, 255, 255));
        lblTieudeTL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieudeTL.setText("Quản lý người dùng");
        lblTieudeTL.setOpaque(true);
        jPanel_Theloaisach.add(lblTieudeTL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 57));

        btnSua.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        btnSua.setForeground(new java.awt.Color(5, 12, 156));
        btnSua.setText("Sửa");
        btnSua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(btnSua, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 500, 150, 35));

        txtMatkhau.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtMatkhau.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel_Theloaisach.add(txtMatkhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 200, 32));

        txtMkxacthuc.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtMkxacthuc.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel_Theloaisach.add(txtMkxacthuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 200, 32));

        ChkSetAdmin.setBackground(new java.awt.Color(200, 247, 197));
        ChkSetAdmin.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        ChkSetAdmin.setForeground(new java.awt.Color(5, 12, 156));
        ChkSetAdmin.setText("Đặt làm quản trị viên");
        ChkSetAdmin.setBorder(null);
        ChkSetAdmin.setContentAreaFilled(false);
        ChkSetAdmin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChkSetAdmin.setFocusPainted(false);
        ChkSetAdmin.setIconTextGap(10);
        ChkSetAdmin.setMargin(new java.awt.Insets(9, 9, 9, 9));
        jPanel_Theloaisach.add(ChkSetAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 455, -1, 35));

        lblWmk.setForeground(new java.awt.Color(255, 51, 51));
        lblWmk.setText("* Mật khẩu không được để trống");
        jPanel_Theloaisach.add(lblWmk, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 200, 18));

        lblWmk2.setForeground(new java.awt.Color(255, 51, 51));
        lblWmk2.setText("* Mật khẩu không khớp");
        jPanel_Theloaisach.add(lblWmk2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 200, 18));

        txtUser.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jPanel_Theloaisach.add(txtUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 150, 32));

        btnTim.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        btnTim.setText("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(btnTim, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, -1, 32));

        btnHienThi.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        btnHienThi.setForeground(new java.awt.Color(5, 12, 156));
        btnHienThi.setText("Hiển thị tất cả");
        btnHienThi.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(5, 12, 156)));
        btnHienThi.setContentAreaFilled(false);
        btnHienThi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHienThiActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(btnHienThi, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 70, -1, 32));

        lblHideMK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ic_eyeclose.png"))); // NOI18N
        lblHideMK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHideMKMouseClicked(evt);
            }
        });
        jPanel_Theloaisach.add(lblHideMK, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 32, 30));

        lblShowMK.setBackground(new java.awt.Color(255, 102, 102));
        lblShowMK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ic_eyeopen.png"))); // NOI18N
        lblShowMK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblShowMKMouseClicked(evt);
            }
        });
        jPanel_Theloaisach.add(lblShowMK, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 32, 30));

        lblShowMK1.setBackground(new java.awt.Color(255, 102, 102));
        lblShowMK1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ic_eyeopen.png"))); // NOI18N
        lblShowMK1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblShowMK1MouseClicked(evt);
            }
        });
        jPanel_Theloaisach.add(lblShowMK1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 390, 32, 30));

        lblHideMK1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ic_eyeclose.png"))); // NOI18N
        lblHideMK1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHideMK1MouseClicked(evt);
            }
        });
        jPanel_Theloaisach.add(lblHideMK1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 390, 32, 30));

        btnThem.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        btnThem.setForeground(new java.awt.Color(5, 12, 156));
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(btnThem, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, 150, 35));

        lblWtk.setForeground(new java.awt.Color(255, 51, 51));
        lblWtk.setText("* Tên tài khoản không được để trống");
        jPanel_Theloaisach.add(lblWtk, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 203, -1));

        lblWhoten.setForeground(new java.awt.Color(255, 51, 51));
        lblWhoten.setText("* Họ tên không được để trống");
        jPanel_Theloaisach.add(lblWhoten, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 175, 173, -1));

        lblWtkExist.setFont(new java.awt.Font("Roboto", 0, 13)); // NOI18N
        lblWtkExist.setForeground(new java.awt.Color(255, 51, 51));
        lblWtkExist.setText("* Tài khoản đã tồn tại");
        jPanel_Theloaisach.add(lblWtkExist, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 280, -1));

        txtSdt.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtSdt.setForeground(new java.awt.Color(40, 67, 135));
        txtSdt.setBorder(null);
        txtSdt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSdtKeyReleased(evt);
            }
        });
        jPanel_Theloaisach.add(txtSdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 200, 32));

        lblSdt.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        lblSdt.setForeground(new java.awt.Color(5, 12, 156));
        lblSdt.setText("Số điện thoại:");
        jPanel_Theloaisach.add(lblSdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 135, 32));

        lblWsdt.setForeground(new java.awt.Color(255, 51, 51));
        lblWsdt.setText("* Số điện thoại không hợp lệ");
        jPanel_Theloaisach.add(lblWsdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 220, -1));

        lblWsdt1.setForeground(new java.awt.Color(255, 51, 51));
        lblWsdt1.setText("* Số điện thoại không được để trống");
        jPanel_Theloaisach.add(lblWsdt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 220, -1));

        jButton1.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(5, 12, 156));
        jButton1.setText("Xóa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel_Theloaisach.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 550, 150, 35));

        getContentPane().add(jPanel_Theloaisach, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        // TODO add your handling code here:
        String keyword = txtUser.getText().trim(); // Lấy từ khóa tìm kiếm từ TextField

        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập từ khóa tìm kiếm!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Gọi phương thức tìm kiếm
            List<NguoiDungModel> dsTimKiem = dsuser.timKiemNguoiDung(keyword);

            // Xóa dữ liệu cũ trong bảng
            tableModel.setRowCount(0);

            if (dsTimKiem.isEmpty()) {
                // Không tìm thấy kết quả
                JOptionPane.showMessageDialog(null, "Không tìm thấy người dùng!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Hiển thị kết quả tìm kiếm
                for (NguoiDungModel nguoiDung : dsTimKiem) {
                    Object[] row = {
                        nguoiDung.getManguoidung(),
                        nguoiDung.getHoten(),
                        nguoiDung.getTaikhoan(),
                        nguoiDung.getMatkhau(),
                        nguoiDung.getLoaiuser()
                    };
                    tableModel.addRow(row);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Lỗi khi tìm kiếm: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTimActionPerformed

    private void btnHienThiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHienThiActionPerformed
        
        try {
            // TODO add your handling code here:
            tableModel.setRowCount(0);
            ShowData();
        } catch (SQLException ex) {
            Logger.getLogger(QLNguoiDung.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnHienThiActionPerformed

    /**
    * Hàm tiện ích để lấy giá trị từ bảng, trả về chuỗi rỗng nếu giá trị null.
    *
    * @param model DefaultTableModel của bảng
    * @param rowIndex Chỉ số dòng
    * @param columnIndex Chỉ số cột
    * @return Giá trị của ô (dưới dạng chuỗi), hoặc chuỗi rỗng nếu null
    **/
    private String getCellValue(DefaultTableModel model, int rowIndex, int columnIndex) {
        Object value = model.getValueAt(rowIndex, columnIndex);
        return value != null ? value.toString() : "";
    }
    
    private void tblNguoidungMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoidungMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblNguoidung.getSelectedRow(); // Lấy chỉ số dòng được chọn

        if (selectedRow >= 0) { // Kiểm tra nếu có dòng được chọn
            DefaultTableModel model = (DefaultTableModel) tblNguoidung.getModel();

            try {
                // Lấy dữ liệu từ từng cột và cập nhật vào các JTextField tương ứng
                txtID.setText(getCellValue(model, selectedRow, 0));
                txtHoten.setText(getCellValue(model, selectedRow, 1));
                txtTentaikhoan.setText(getCellValue(model, selectedRow, 2));
                /*
                txtMatkhau.setText(getCellValue(model, selectedRow, 3));
                txtMkxacthuc.setText(getCellValue(model, selectedRow, 4)); // Cột "Xác thực"
                
                // Lấy mật khẩu dạng mã hóa
                String encryptedPassword = getCellValue(model, selectedRow, 3);

                // Giải mã mật khẩu để hiển thị dạng bản rõ
                String decryptedPassword = decryptPassword(encryptedPassword);
                txtMatkhau.setText(decryptedPassword);

                // Nếu có cột "Xác thực", hiển thị lên
                //txtMkxacthuc.setText(decryptedPassword);
                */
                txtSdt.setText(getCellValue(model, selectedRow, 4));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi đọc dữ liệu: " + e.getMessage(),
                        "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_tblNguoidungMouseClicked

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        // TODO add your handling code here:
        txtID.setText("");
        txtHoten.setText("");
        txtTentaikhoan.setText("");
        txtMatkhau.setText("");
        txtMkxacthuc.setText("");
        txtSdt.setText("");
        ChkSetAdmin.setSelected(false);
    }//GEN-LAST:event_btnHuyActionPerformed

    private void lblHideMKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHideMKMouseClicked
        // TODO add your handling code here:
        // Ẩn mật khẩu (trở về dạng ***)
        txtMatkhau.setEchoChar('*'); // Ẩn mật khẩu (dạng ***)
        lblShowMK.setVisible(true); // Hiển thị biểu tượng mở mắt
        lblHideMK.setVisible(false); // Ẩn biểu tượng đóng mắt
    }//GEN-LAST:event_lblHideMKMouseClicked

    private void lblShowMKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblShowMKMouseClicked
        // TODO add your handling code here:
        txtMatkhau.setEchoChar((char) 0); // Hiển thị mật khẩu
        lblShowMK.setVisible(false); // Ẩn biểu tượng mở mắt
        lblHideMK.setVisible(true); // Hiển thị biểu tượng đóng mắt
    }//GEN-LAST:event_lblShowMKMouseClicked

    private void lblShowMK1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblShowMK1MouseClicked
        // TODO add your handling code here:
        txtMkxacthuc.setEchoChar((char) 0); // Hiển thị mật khẩu
        lblShowMK1.setVisible(false); // Ẩn biểu tượng mở mắt
        lblHideMK1.setVisible(true); // Hiển thị biểu tượng đóng mắt
    }//GEN-LAST:event_lblShowMK1MouseClicked

    private void lblHideMK1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHideMK1MouseClicked
        // TODO add your handling code here:
        // Ẩn mật khẩu (trở về dạng ***)
        txtMkxacthuc.setEchoChar('*'); // Ẩn mật khẩu (dạng ***)
        lblShowMK1.setVisible(true); // Hiển thị biểu tượng mở mắt
        lblHideMK1.setVisible(false); // Ẩn biểu tượng đóng mắt
    }//GEN-LAST:event_lblHideMK1MouseClicked

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        try {
            // Lấy dòng đang được chọn
            int selectedRow = tblNguoidung.getSelectedRow();

            // Kiểm tra nếu chưa chọn dòng nào
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để sửa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblNguoidung.getModel();

            // Lấy ID người dùng từ bảng
            String userId = model.getValueAt(selectedRow, 0).toString();
            String currentLoaiUser = model.getValueAt(selectedRow, 5).toString();
            
            // Lấy dữ liệu từ các trường nhập
            String hoTen = txtHoten.getText().trim();
            String taiKhoan = txtTentaikhoan.getText().trim();
            String matKhau = new String(txtMatkhau.getPassword());
            String xacNhanMatKhau = new String(txtMkxacthuc.getPassword());
            String soDienThoai = txtSdt.getText().trim();
            String loaiUser = ChkSetAdmin.isSelected() ? "Admin" : "User";

            boolean hasChanges = false;

            // Kiểm tra và cập nhật từng trường
            if (!hoTen.isEmpty()) {
                if (dsuser.updateUserField(userId, "hoten", hoTen)) {
                    hasChanges = true;
                }
            }

            if (!taiKhoan.isEmpty()) {
                if (dsuser.kiemTraTaiKhoanTonTai(taiKhoan)) {
                    JOptionPane.showMessageDialog(this, "Tài khoản đã tồn tại!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (dsuser.updateUserField(userId, "taikhoan", taiKhoan)) {
                    hasChanges = true;
                }
            }

            if (!matKhau.isEmpty() || !xacNhanMatKhau.isEmpty()) {
                if (!matKhau.equals(xacNhanMatKhau)) {
                    JOptionPane.showMessageDialog(this, "Mật khẩu và xác nhận mật khẩu không khớp!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                String encryptPassword = NguoiDungController.encryptPassword(matKhau);
                if (dsuser.updateUserField(userId, "matkhau", encryptPassword)) {
                    hasChanges = true;
                }
            }

            if (!soDienThoai.isEmpty()) {
                if (!isValidPhoneNumber(soDienThoai)) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (dsuser.updateUserField(userId, "sodt", soDienThoai)) {
                    hasChanges = true;
                }
            }

            // Chỉ cập nhật loaiUser nếu có thay đổi
            if (!loaiUser.equals(currentLoaiUser)) {
                if (dsuser.updateUserField(userId, "loaiuser", loaiUser)) {
                    hasChanges = true;
                }
            }

            if (!hasChanges) {
                JOptionPane.showMessageDialog(this, "Không có trường nào được cập nhật!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                ClearData();
                ShowData();
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    // Phương thức kiểm tra tên tài khoản hợp lệ 
    private boolean isValidUsername(String username) { 
        // Quy tắc: ít nhất 3 ký tự, không quá 15 ký tự, không khoảng trắng, chỉ chứa chữ cái và số 
        return username.matches("^[a-zA-Z0-9]{3,15}$"); 
    } 
    
    // Phương thức kiểm tra mật khẩu hợp lệ 
    private boolean kiemTraMatKhauHopLe(String matKhau) {
        return matKhau.length() >= 8 && 
               matKhau.matches(".*[A-Z].*") && 
               matKhau.matches(".*[a-z].*") && 
               matKhau.matches(".*\\d.*");
    }
    private boolean isValidPhoneNumber(String phoneNumber) {
        return phoneNumber.matches("\\d{10}"); // Yêu cầu 10 chữ số
    }
    
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        try {
            // Lấy dữ liệu từ các trường nhập
            String fullname = txtHoten.getText().trim();
            String taikhoan = txtTentaikhoan.getText().trim();
            String matkhau = new String(txtMatkhau.getPassword());
            String xacnhanMatKhau = new String(txtMkxacthuc.getPassword());
            String soDienThoai = txtSdt.getText().trim();
            String loaiUser = ChkSetAdmin.isSelected() ? "Admin" : "user";
            
            boolean isValid = true;

            
            // Kiểm tra dữ liệu nhập vào
            // 1. Kiểm tra họ tên
            if (fullname.isEmpty()) {
                lblWhoten.setVisible(true);
                return;
            } 
            
            // 2. Kiểm tra username
            if (taikhoan.isEmpty()) {
                lblWtk.setVisible(true);
                return;
            }
            if (!isValidUsername(taikhoan)) {
                JOptionPane.showMessageDialog(null, "Tên tài khoản không hợp lệ (3-15 ký tự, không chứa khoảng trắng)!",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // 3. Kiểm tra mật khẩu
            if (matkhau.isEmpty()) {
                lblWmk.setVisible(true);
                return;
            }
            /*
            if (!kiemTraMatKhauHopLe(matkhau)) {
                JOptionPane.showMessageDialog(null, "Mật khẩu phải có ít nhất 8 ký tự, chứa chữ hoa, chữ thường và số.",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            */
            // 4. Kiểm tra xác minh mật khẩu
            if (!matkhau.equals(xacnhanMatKhau)) {
                lblWmk2.setVisible(true);
                return;
            }
            
            // 5. Kiểm tra số điện thoại
            if (soDienThoai.trim().isEmpty()) {
                lblWsdt1.setVisible(true);
                return;
            }
            if (!isValidPhoneNumber(soDienThoai)) {
                // Ví dụ: yêu cầu số điện thoại gồm 10 chữ số
                lblWsdt.setVisible(true);
            } 

            
            // Chỉ tiếp tục nếu tất cả dữ liệu hợp lệ
            if (!isValid) {
                return;
            }
            

                // Kiểm tra tài khoản đã tồn tại
                if (dsuser.kiemTraTaiKhoanTonTai(taikhoan)) {
                    lblWtkExist.setVisible(true);            
                    return;
                }

                // Đăng ký tài khoản
                boolean themthanhcong = dsuser.addUser(taikhoan, matkhau, fullname, soDienThoai, loaiUser);

                if (themthanhcong) {
                    JOptionPane.showMessageDialog(this, "Thêm thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    ClearData(); // Xóa dữ liệu trong các trường nhập
                    ShowData(); // Tải lại dữ liệu vào bảng từ database
                } else {
                    JOptionPane.showMessageDialog(null, "Thêm thất bại. Vui lòng thử lại.", "Thông báo", JOptionPane.WARNING_MESSAGE);
                }
        } catch (HeadlessException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void txtSdtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSdtKeyReleased
        // TODO add your handling code here:
        String soDienThoai = txtSdt.getText().trim();

        if (soDienThoai.isEmpty()) {
            lblWsdt1.setVisible(true); // Hiển thị cảnh báo nếu trống
            lblWsdt.setVisible(false); // Ẩn cảnh báo không hợp lệ
        } else if (!isValidPhoneNumber(soDienThoai)) {
            lblWsdt1.setVisible(false); // Ẩn cảnh báo trống
            lblWsdt.setVisible(true);  // Hiển thị cảnh báo không hợp lệ
        } else {
            lblWsdt1.setVisible(false); // Ẩn cả hai cảnh báo khi hợp lệ
            lblWsdt.setVisible(false);
        }
    }//GEN-LAST:event_txtSdtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            // Lấy dòng được chọn trong bảng
            int selectedRow = tblNguoidung.getSelectedRow();

            // Kiểm tra nếu chưa chọn dòng nào
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Lấy ID người dùng từ bảng
            DefaultTableModel model = (DefaultTableModel) tblNguoidung.getModel();
            int idUser = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());

            // Kiểm tra xem độc giả có phiếu mượn nào chưa trả không
            boolean hasUnreturnedBooks = dsuser.checkIfUserHasUnreturnedBooks(idUser);

            if (hasUnreturnedBooks) {
                JOptionPane.showMessageDialog(this, "Không thể xóa người dùng này vì họ đang có sách mượn chưa trả!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return; // Ngừng thao tác xóa nếu có phiếu mượn chưa trả
            }

            // Hiển thị hộp thoại xác nhận
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa người dùng này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) {
                return; // Hủy thao tác nếu chọn "No"
            }

            // Thực hiện xóa người dùng
            boolean isDeleted = dsuser.deleteNguoiDung(idUser);

            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Xóa người dùng thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                // Cập nhật lại bảng
                ClearData(); // Xóa trắng dữ liệu bảng
                ShowData();  // Hiển thị dữ liệu mới
            } else {
                JOptionPane.showMessageDialog(this, "Xóa người dùng thất bại. Vui lòng thử lại!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLNguoiDung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                QLNguoiDung dialog = new QLNguoiDung(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(QLNguoiDung.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ChkSetAdmin;
    private javax.swing.JButton btnHienThi;
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel_Theloaisach;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHideMK;
    private javax.swing.JLabel lblHideMK1;
    private javax.swing.JLabel lblMasach;
    private javax.swing.JLabel lblSdt;
    private javax.swing.JLabel lblShowMK;
    private javax.swing.JLabel lblShowMK1;
    private javax.swing.JLabel lblSoluong;
    private javax.swing.JLabel lblTacgia;
    private javax.swing.JLabel lblTensach;
    private javax.swing.JLabel lblTheloai;
    private javax.swing.JLabel lblTieudeTL;
    private javax.swing.JLabel lblWhoten;
    private javax.swing.JLabel lblWmk;
    private javax.swing.JLabel lblWmk2;
    private javax.swing.JLabel lblWsdt;
    private javax.swing.JLabel lblWsdt1;
    private javax.swing.JLabel lblWtk;
    private javax.swing.JLabel lblWtkExist;
    private javax.swing.JTable tblNguoidung;
    private javax.swing.JTextField txtHoten;
    private javax.swing.JTextField txtID;
    private javax.swing.JPasswordField txtMatkhau;
    private javax.swing.JPasswordField txtMkxacthuc;
    private javax.swing.JTextField txtSdt;
    private javax.swing.JTextField txtTentaikhoan;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
